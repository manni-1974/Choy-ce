

Execute contract 2/10/25 10:27 am

def execute_contract(self, contract_name, function_name, params, sender=None, readonly=False):
        """Execute or call a smart contract function.
        
        - If `readonly=True`, it will execute the function **without modifying state** or charging gas.
        - If `readonly=False`, it will execute **with state modification** and charge gas fees.
        """
        
        if contract_name not in self.contracts:
            return jsonify({"error": "Contract not found"}), 404

        contract_code = self.contracts[contract_name]["code"]
        contract_state = self.contracts[contract_name]["state"]

        if "logs" not in self.contracts[contract_name]:
            self.contracts[contract_name]["logs"] = []

        local_scope = {"state": contract_state}

        try:
            exec(contract_code, {}, local_scope)

            if function_name in local_scope and callable(local_scope[function_name]):
                if readonly:
                    
                    result = local_scope[function_name](**params)
                    return jsonify({
                        "message": f"Function {function_name} executed successfully (readonly).",
                        "result": result
                    }), 200
                
                gas_fee = self.GAS_FEE_PER_CONTRACT_EXECUTION
                sender_balance = self.get_wallet_balance(sender).get("balance", {}).get("IFC", 0)

                if sender_balance < gas_fee:
                    return jsonify({"error": "Insufficient balance for gas fee"}), 400
                
                for block in self.chain:
                    for tx in block.transactions:
                        if tx["sender"] == sender:
                            tx["amount"] -= gas_fee
                            tx["net_amount"] -= gas_fee
               
                result = local_scope[function_name](**params)
                self.contracts[contract_name]["state"] = local_scope["state"]
                
                self.contracts[contract_name]["logs"].append({
                    "timestamp": time.time(),
                    "function": function_name,
                    "params": params,
                    "result": result,
                    "executed_by": sender,
                    "gas_fee": gas_fee
                })

                self.save_contract_state()

                return jsonify({
                    "message": f"Function {function_name} executed successfully.",
                    "result": result,
                    "gas_fee_deducted": gas_fee
                }), 200

            return jsonify({"error": "Function not found"}), 400

        except Exception as e:
            return jsonify({"error": f"Contract execution failed: {str(e)}"}), 400



@app.route('/contract_logs/<contract_name>', methods=['GET'])
def get_contract_logs(contract_name):
    """Fetch execution logs of a specific contract."""
    if contract_name in ifchain.contracts and "logs" in ifchain.contracts[contract_name]:
        return jsonify({
            "contract_name": contract_name,
            "logs": ifchain.contracts[contract_name]["logs"]
        }), 200
    return jsonify({"error": "No logs found for this contract"}), 404



@app.route('/deploy_contract', methods=['POST'])
def api_deploy_contract():
    """API endpoint to deploy a smart contract."""
    data = request.get_json()

    if "contract_name" not in data or "contract_code" not in data or "owner" not in data:
        return jsonify({"error": "Missing contract name, code, or owner"}), 400

    contract_name = data["contract_name"]
    contract_code = data["contract_code"]
    owner = data["owner"]

    if contract_name in ifchain.contracts:
        return jsonify({"error": f"Contract {contract_name} already exists."}), 400

    if ifchain.deploy_contract(contract_name, contract_code, owner):
        return jsonify({"message": f"Contract {contract_name} deployed successfully by {owner}."}), 200

    return jsonify({"error": "Contract deployment failed."}), 400